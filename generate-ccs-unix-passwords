#!/usr/bin/env python3

import argparse
import csv
import json
import os.path
import icpcpwutils
import yaml

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description='Generate passwords for the CCS and unix.')
parser.add_argument('-m', '--master-file', help='Also generate a master PDF. Will not be generated if not set.', action='store_true')
parser.add_argument('-c', '--ccs-name', help='Name of the CCS to use.', default='DOMjudge')
parser.add_argument('-l', '--ccs-link', help='Link for the CCS.', default='')
parser.add_argument('-f', '--footer-text', help='Text to put on the bottom of password sheets.', default='')
parser.add_argument('-T', '--title-text', help='Text to put on the title of password sheets.', default='')
parser.add_argument('-b', '--banner-file', help='File to use as banner for password sheets.', default='')
parser.add_argument('-o', '--others-file', help='File to load other accounts from, if any.', default='')
parser.add_argument('-t', '--generate-accounts-tsv', help='Also generate the accounts.tsv file.', action='store_true')
parser.add_argument('-i', '--ip-prefix', help='IP prefix to use for auto login into CCS. If empty no IP\'s will be generated. Example: 10.0.0', default='')
parser.add_argument('teams_json', help='Location of the teams.json file to read teams from.')
parser.add_argument('output_dir', help='Directory to store output files.')
parser.add_argument('contest_name', help='Name of the contest to use. Will determine file names')

args = parser.parse_args()

if not os.path.isdir(args.output_dir):
    print(f'{args.output_dir} is not an existing directory, creating...')
    os.makedirs(args.output_dir, exist_ok=True)

teams = icpcpwutils.get_json_file_contests(args.teams_json)

account_data = []
for team in teams:
    account = {
        'id': f'team{team["id"]}',
        'username': f'team{team["id"]}',
        'password': icpcpwutils.generate_password(),
        'type': 'team',
        'name': team.get('display_name', team['name'])
    }

    if args.ip_prefix:
        account['ip'] = f'{args.ip_prefix}.{team["id"]}'

    account_data.append(account)

if args.others_file:
    other_accounts = icpcpwutils.get_yaml_file_contests(args.others_file)
    for account in other_accounts:
        account = {
            'id': account.get('id', account['username']),
            'username': account['username'],
            'password': icpcpwutils.generate_password(),
            'type': account['type'],
            'name': account.get('name', '-'),
        }

        if args.ip_prefix:
            account['ip'] = f'{args.ip_prefix}.{team["id"]}'

        account_data.append(account)

sheet_variables = {
    'accounts': filter(lambda account: account['type'] == 'team', account_data),
    'title': args.title_text,
    'footer': args.footer_text,
    'ccs': args.ccs_name,
}

if args.banner_file:
    sheet_variables['banner'] = os.path.abspath(args.banner_file)
if args.ccs_link:
    sheet_variables['link'] = args.ccs_link

team_sheets_file = f'{args.output_dir}/{args.contest_name}_team_password_sheets.pdf'

icpcpwutils.generate_template_to_pdf(
    'ccs-sheets-template.html',
    sheet_variables,
    team_sheets_file
)
print(f'Team sheet file written to {team_sheets_file}')

if args.others_file:
# ugly kludge, also include teams for NAC23
    sheet_variables['accounts'] = filter(lambda account: account['type'] != 'team', account_data)
    other_sheets_file = f'{args.output_dir}/{args.contest_name}_other_password_sheets.pdf'

    icpcpwutils.generate_template_to_pdf(
        'ccs-sheets-template.html',
        sheet_variables,
        other_sheets_file
    )
    print(f'Other sheet file written to {other_sheets_file}')

password_file = f'{args.output_dir}/{args.contest_name}.accounts.txt'
with open(password_file, 'w') as f:
    writer = csv.writer(f, delimiter='\t')
    for account in account_data:
        writer.writerow([account['username'], account['password'], account['username'], account['password']])

    print(f'CCS / Unix password info written to {password_file}')

unix_accounts_yaml_file = f'{args.output_dir}/unix-accounts.yaml'
with open(unix_accounts_yaml_file,'w') as f:
    accounts = {"users": {account["username"]: account["password"] for account in account_data}}
    yaml.safe_dump(accounts, f)
    print(f'unix-accounts.yaml written to {unix_accounts_yaml_file}')

accounts_yaml_file = f'{args.output_dir}/{args.contest_name}.accounts.yaml'
with open(accounts_yaml_file,'w') as f:
    yaml.safe_dump(account_data, f)
    print(f'CCS accounts.yaml written to {accounts_yaml_file}')

if args.generate_accounts_tsv:
    accounts_tsv_file = f'{args.output_dir}/{args.contest_name}.accounts.tsv'
    with open(accounts_tsv_file,'w') as f:
        writer = csv.writer(f, delimiter='\t')
        writer.writerow(['accounts', 1])
        for account in account_data:
            writer.writerow([
                account['type'],
                account['name'],
                account['username'],
                account['password']
            ])

        print(f'CCS accounts.tsv written to {accounts_tsv_file}')

def chunked(data: list, per_chunk: int) -> list:
    return [data[i:i+per_chunk] for i in range(0, len(data), per_chunk)]

if args.master_file:
    rows_per_page = 39
    columns_per_page = 3
    per_page = rows_per_page * columns_per_page
    pages = [chunked(page, rows_per_page) for page in chunked(account_data, rows_per_page * columns_per_page)]
    master_file = f'{args.output_dir}/{args.contest_name}_contest_master.pdf'
    icpcpwutils.generate_template_to_pdf(
        'ccs-master-template.html',
        {
            'pages': pages,
            'num_columns': columns_per_page,
            'date': icpcpwutils.today_formated(),
            'title': args.title_text,
            'footer': args.footer_text,
        },
        master_file,
        orientation='Landscape'
    )
    print(f'Master file written to {master_file}')
