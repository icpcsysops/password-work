#!/usr/bin/env python3
import shutil

# We load icpcpwutils first since that will check if packages exist and prints a nice message
import icpcpwutils
import os.path
from argparse import ArgumentParser, RawTextHelpFormatter
from questionary import Choice

parser = ArgumentParser(
    formatter_class=RawTextHelpFormatter,
    description='ICPC password utility')

parser.add_argument('source', help='Source to use. Use --list or -l to view all sources', nargs='?')
parser.add_argument('-l', '--list', help='List all possible sources', action='store_true')
parser.add_argument('-f', '--overwrite', help='Force overwrite passwords', action='store_true')

args = parser.parse_args()

config = icpcpwutils.load_config()

if args.list:
    print('Possible sources:')
    for name, contest in config.contests.items():
        print(f'- {name}: Contest {contest.config.name} starting at {contest.config.start_time}')

    if config.cds:
        print('- cds: CDS accounts')

    if config.challenge:
        print('- challenge: Challenge accounts')

    exit(0)

sources = [Choice(f'{n} - {c.config.name} starting at {c.config.start_time}', n) for n, c in
           sorted(config.contests.items())]
if config.cds:
    sources.append(Choice(f'CDS passwords', 'cds'))
if config.challenge:
    sources.append(Choice(f'Challenge passwords', 'challenge'))

source = icpcpwutils.ask_or_argument(args, 'source', 'What source do you want to use?', sources, 'Invalid source')
if not source:
    exit(1)

contest = None
if source == 'challenge' and config.challenge:
    config.validate_challenge()

    if not os.path.isdir('challenge'):
        os.mkdir('challenge')

    number_of_words_per_password = config.challenge.option_or_global('number_of_words_per_password',
                                                                     config.global_config)
    ip_prefix = config.challenge.option_or_global('ip_prefix', config.global_config)
    footer = config.challenge.option_or_global('footer', config.global_config)
    account_types = config.challenge.option_or_global('account_types', config.global_config)
    page_size = config.challenge.option_or_global('page_size', config.global_config)
    banner = config.challenge.banner

    accounts = {}
    if not args.overwrite:
        # Load existing accounts if any
        accounts = icpcpwutils.load_accounts(f'challenge/challenge.accounts.yaml', number_of_words_per_password,
                                             ip_prefix)

    for account_file in config.challenge.account_files:
        if account_file.organizations_file:
            accounts = icpcpwutils.add_team_accounts(accounts, account_file.teams_file, number_of_words_per_password,
                                                     ip_prefix, account_file.username_prefix,
                                                     account_file.organizations_file)
        else:
            accounts = icpcpwutils.add_team_accounts(accounts, account_file.teams_file, number_of_words_per_password,
                                                     ip_prefix, account_file.username_prefix)

    icpcpwutils.write_accounts_yaml('challenge', accounts)
    icpcpwutils.write_password_sheets('ccs-and-challenge-sheets.html', f'challenge/challenge_password_sheets.pdf',
                                      accounts,
                                      config.challenge.title, footer, banner, account_types, page_size)
    icpcpwutils.write_master_file('ccs-and-challenge-master.html', 'challenge/challenge_contest_master.pdf', accounts,
                                  config.challenge.title, footer, account_types, page_size)

    if account_types.linux:
        icpcpwutils.write_linux_accounts('challenge', accounts)
elif source == 'cds' and config.cds:
    config.validate_cds()

    if not os.path.isdir('cds'):
        os.mkdir('cds')

    if config.cds.servers_folder and not os.path.isdir(config.cds.servers_folder):
        os.mkdir(config.cds.servers_folder)

    number_of_words_per_password = config.cds.option_or_global('number_of_words_per_password', config.global_config)
    footer = config.cds.option_or_global('footer', config.global_config)
    page_size = config.cds.option_or_global('page_size', config.global_config)
    banner = config.cds.banner

    cds_config_file = icpcpwutils.load_cds_config_file(config.cds.config)

    accounts_per_server = {}
    for server in cds_config_file.servers:
        accounts_per_server[server.name] = {}

    # Load existing accounts when we are generating and not overwriting
    if not args.overwrite:
        for server in cds_config_file.servers:
            account_file = f'cds/{server.name}/config/accounts.yaml'
            if os.path.isfile(account_file):
                accounts_per_server[server.name] = icpcpwutils.load_accounts(account_file, number_of_words_per_password,
                                                                             None, accounts_per_server[server.name])

    # Now generate (new) accounts
    for account in cds_config_file.accounts:
        for server in account.servers:
            if server not in accounts_per_server:
                print(f'Account {account.username} has an unknown server {server}')
                exit(1)

            # Only add accounts if they don't exist yet
            if account.username not in accounts_per_server[server]:
                added_account = icpcpwutils.Account(account.username, account.name, account.type, account.username)
                added_account.generate_password(number_of_words_per_password)
                accounts_per_server[server][account.username] = added_account
            else:
                accounts_per_server[server][account.username].name = account.name

    # Write the CDS account files
    for server in cds_config_file.servers:
        config_folder = f'cds/{server.name}/config'
        if not os.path.isdir(config_folder):
            os.mkdir(config_folder)

        icpcpwutils.write_accounts_yaml(config_folder, accounts_per_server[server.name], False)

    icpcpwutils.write_cds_password_sheets('cds-sheets.html', 'cds/CDS_password_sheets.pdf', cds_config_file,
                                          accounts_per_server,
                                          footer, banner, page_size)
    icpcpwutils.write_cds_master_file('cds-master.html', 'cds/CDS_master.pdf', cds_config_file, accounts_per_server,
                                      footer, page_size)

    if config.cds.servers_folder:
        for server in cds_config_file.servers:
            folder = f'{config.cds.servers_folder}/{server.name}/config'
            os.makedirs(folder, exist_ok=True)

            file = f'{folder}/accounts.yaml'
            if os.path.isfile(file) or os.path.islink(file):
                os.unlink(file)

            shutil.copy(f'cds/{server.name}/config/accounts.yaml', file)
            print(f'Accounts.yaml copied to {file} for server {server.name}')

else:
    contest_name = source
    contest = config.contests[contest_name]
    config.validate_contest(contest_name, contest)

    if not os.path.isdir(contest_name):
        os.mkdir(contest_name)

    number_of_words_per_password = contest.contest_option_or_global('number_of_words_per_password',
                                                                    config.global_config)
    ip_prefix = contest.contest_option_or_global('ip_prefix', config.global_config)
    additional_account_files = contest.contest_option_or_global('additional_account_files', config.global_config, [])
    footer = contest.contest_option_or_global('footer', config.global_config)
    account_types = contest.contest_option_or_global('account_types', config.global_config)
    page_size = contest.contest_option_or_global('page_size', config.global_config)
    generate_accounts_tsv = contest.contest_option_or_global('generate_accounts_tsv', config.global_config)

    accounts = {}
    if not args.overwrite:
        # Load existing accounts if any
        accounts = icpcpwutils.load_accounts(f'{contest_name}/{contest_name}.accounts.yaml',
                                             number_of_words_per_password, ip_prefix)

    teams_file = f'{config.global_config.contests_folder}/{contest_name}/teams.json'
    if not os.path.isfile(teams_file):
        teams_file = f'{config.global_config.contests_folder}/{contest_name}/config/teams.json'
    accounts = icpcpwutils.add_team_accounts(accounts, teams_file, number_of_words_per_password, ip_prefix)

    for file in additional_account_files:
        accounts = icpcpwutils.load_accounts(file, number_of_words_per_password, ip_prefix, accounts)

    banner = None
    banner_files = [
        f'{config.global_config.contests_folder}/{contest_name}/contest/banner.jpg',
        f'{config.global_config.contests_folder}/{contest_name}/contest/banner.png',
        f'{config.global_config.contests_folder}/{contest_name}/banner.jpg',
        f'{config.global_config.contests_folder}/{contest_name}/banner.png',
        f'{config.global_config.contests_folder}/{contest_name}/config/banner.jpg',
        f'{config.global_config.contests_folder}/{contest_name}/config/banner.png',
    ]
    for banner_file in banner_files:
        if os.path.isfile(banner_file):
            banner = banner_file
            break

    icpcpwutils.write_accounts_yaml(contest_name, accounts)

    if generate_accounts_tsv:
        icpcpwutils.write_accounts_tsv(contest_name, accounts, [
            f'{config.global_config.contests_folder}/{contest_name}/config',
            f'{config.global_config.contests_folder}/{contest_name}',
        ])

    if account_types.linux:
        icpcpwutils.write_linux_accounts(contest_name, accounts)

    icpcpwutils.write_password_sheets('ccs-and-challenge-sheets.html',
                                      f'{contest_name}/{contest_name}_password_sheets.pdf', accounts,
                                      contest.config.name, footer, banner, account_types, page_size)
    icpcpwutils.write_master_file('ccs-and-challenge-master.html', f'{contest_name}/{contest_name}_contest_master.pdf',
                                  accounts,
                                  contest.config.name, footer, account_types, page_size)
