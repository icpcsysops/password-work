#!/usr/bin/env python3
import os.path
from argparse import ArgumentParser, RawTextHelpFormatter
import icpcpwutils
from questionary import Choice

config = icpcpwutils.load_config()

subcommands = [
    Choice('Contest passwords', 'contest'),
    Choice('Challenge passwords', 'challenge'),
    Choice('CDS passwords', 'cds'),
]

modes = [
    Choice('Generate password for new accounts and generate all sheets', 'generate'),
    Choice('Drop existing passwords, generate passwords for all accounts and generate sheets', 'force'),
]

parser = ArgumentParser(
    formatter_class=RawTextHelpFormatter,
    description='ICPC password utility')

subparsers = parser.add_subparsers(dest='subcommand')

for subcommand in subcommands:
    sub_parser = subparsers.add_parser(subcommand.value, help=subcommand.title)

    if subcommand.value == 'contest':
        sub_parser.add_argument('contest', help='Contest to use', nargs='?')
        sub_parser.add_argument('mode', help='Mode to use', nargs='?', choices=[m.value for m in modes])

args = parser.parse_args()

subcommand = icpcpwutils.ask_or_argument(args, 'subcommand', 'What do you want to do?', subcommands,
                                         'Invalid subcommand')
contest = None
if subcommand == 'contest':
    contests = [Choice(f'{c.config.name} starting at {c.config.start_time}', c.name) for c in config.contests]
    contest_name = icpcpwutils.ask_or_argument(args, 'contest', 'What contest do you want to use?', contests,
                                               'Invalid contest')
    contest = next(c for c in config.contests if c.name == contest_name)
    config.validate_contest(contest)

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')

    number_of_words_per_password = contest.number_of_words_per_password
    if number_of_words_per_password is None:
        number_of_words_per_password = config.global_config.number_of_words_per_password

    ip_prefix = contest.ip_prefix
    if ip_prefix is None:
        ip_prefix = config.global_config.ip_prefix

    accounts = {}
    if mode == 'generate':
        # Load existing accounts if any
        accounts = icpcpwutils.load_accounts(f'{contest.name}/{contest.name}.accounts.yaml',
                                             number_of_words_per_password, ip_prefix)

    teams_file = f'{config.global_config.contests_folder}/{contest.name}/teams.json'
    if not os.path.isfile(teams_file):
        teams_file = f'{config.global_config.contests_folder}/{contest.name}/config/teams.json'
    accounts = icpcpwutils.add_team_accounts(accounts, teams_file, number_of_words_per_password, ip_prefix)

    additional_account_files = []
    if contest.additional_account_files is not None:
        additional_account_files = contest.additional_account_files
    elif config.global_config.additional_account_files:
        additional_account_files = config.global_config.additional_account_files

    for file in additional_account_files:
        accounts = icpcpwutils.load_accounts(file, number_of_words_per_password, ip_prefix, accounts)

    footer = contest.footer
    if footer is None:
        footer = config.global_config.footer

    banner = None
    banner_files = [
        f'{config.global_config.contests_folder}/{contest.name}/contest/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/contest/banner.png',
        f'{config.global_config.contests_folder}/{contest.name}/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/banner.png',
        f'{config.global_config.contests_folder}/{contest.name}/config/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/config/banner.png',
    ]
    for banner_file in banner_files:
        if os.path.isfile(banner_file):
            banner = banner_file
            break

    account_types = contest.account_types
    if account_types is None:
        account_types = config.global_config.account_types

    page_size = contest.page_size
    if page_size is None:
        page_size = config.global_config.page_size

    icpcpwutils.write_accounts_yaml(contest.name, accounts)

    write_tsv = contest.generate_accounts_tsv
    if write_tsv is None:
        write_tsv = config.global_config.generate_accounts_tsv

    if write_tsv:
        icpcpwutils.write_accounts_tsv(contest.name, accounts, [
            f'{config.global_config.contests_folder}/{contest.name}/config',
            f'{config.global_config.contests_folder}/{contest.name}',
        ])

    if account_types.linux:
        icpcpwutils.write_linux_accounts(contest.name, accounts)

    icpcpwutils.write_password_sheets('ccs-sheets.html', f'{contest.name}/{contest.name}_password_sheets.pdf', accounts,
                                      contest.config.name, footer, banner, account_types, page_size)
    icpcpwutils.write_master_file('ccs-master.html', f'{contest.name}/{contest.name}_contest_master.pdf', accounts,
                                  contest.config.name, footer, banner, account_types, page_size)
elif subcommand == 'challenge':
    config.validate_challenge()

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')
elif subcommand == 'cds':
    config.validate_cds()

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')
