#!/usr/bin/env python3

# We load icpcpwutils first since that will check if packages exist and prints a nice message
import icpcpwutils
import os.path
from argparse import ArgumentParser, RawTextHelpFormatter
from questionary import Choice

config = icpcpwutils.load_config()

subcommands = [
    Choice('Contest passwords', 'contest'),
    Choice('Challenge passwords', 'challenge'),
    Choice('CDS passwords', 'cds'),
]

modes = [
    Choice('Generate password for new accounts and generate all sheets', 'generate'),
    Choice('Drop existing passwords, generate passwords for all accounts and generate sheets', 'force'),
]

parser = ArgumentParser(
    formatter_class=RawTextHelpFormatter,
    description='ICPC password utility')

subparsers = parser.add_subparsers(dest='subcommand')

for subcommand in subcommands:
    sub_parser = subparsers.add_parser(subcommand.value, help=subcommand.title)

    if subcommand.value == 'contest':
        sub_parser.add_argument('contest', help='Contest to use', nargs='?')

    sub_parser.add_argument('mode', help='Mode to use', nargs='?', choices=[m.value for m in modes])

args = parser.parse_args()

subcommand = icpcpwutils.ask_or_argument(args, 'subcommand', 'What do you want to do?', subcommands,
                                         'Invalid subcommand')
contest = None
if subcommand == 'contest':
    contests = [Choice(f'{c.config.name} starting at {c.config.start_time}', c.name) for c in config.contests]
    contest_name = icpcpwutils.ask_or_argument(args, 'contest', 'What contest do you want to use?', contests,
                                               'Invalid contest')
    contest = next(c for c in config.contests if c.name == contest_name)
    config.validate_contest(contest)

    if not os.path.isdir(contest.name):
        os.mkdir(contest.name)

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')

    number_of_words_per_password = contest.contest_option_or_global('number_of_words_per_password',
                                                                    config.global_config)
    ip_prefix = contest.contest_option_or_global('ip_prefix', config.global_config)
    additional_account_files = contest.contest_option_or_global('additional_account_files', config.global_config, [])
    footer = contest.contest_option_or_global('footer', config.global_config)
    account_types = contest.contest_option_or_global('account_types', config.global_config)
    page_size = contest.contest_option_or_global('page_size', config.global_config)
    generate_accounts_tsv = contest.contest_option_or_global('generate_accounts_tsv', config.global_config)

    accounts = {}
    if mode == 'generate':
        # Load existing accounts if any
        accounts = icpcpwutils.load_accounts(f'{contest.name}/{contest.name}.accounts.yaml',
                                             number_of_words_per_password, ip_prefix)

    teams_file = f'{config.global_config.contests_folder}/{contest.name}/teams.json'
    if not os.path.isfile(teams_file):
        teams_file = f'{config.global_config.contests_folder}/{contest.name}/config/teams.json'
    accounts = icpcpwutils.add_team_accounts(accounts, teams_file, number_of_words_per_password, ip_prefix)

    for file in additional_account_files:
        accounts = icpcpwutils.load_accounts(file, number_of_words_per_password, ip_prefix, accounts)

    banner = None
    banner_files = [
        f'{config.global_config.contests_folder}/{contest.name}/contest/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/contest/banner.png',
        f'{config.global_config.contests_folder}/{contest.name}/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/banner.png',
        f'{config.global_config.contests_folder}/{contest.name}/config/banner.jpg',
        f'{config.global_config.contests_folder}/{contest.name}/config/banner.png',
    ]
    for banner_file in banner_files:
        if os.path.isfile(banner_file):
            banner = banner_file
            break

    icpcpwutils.write_accounts_yaml(contest.name, accounts)

    if generate_accounts_tsv:
        icpcpwutils.write_accounts_tsv(contest.name, accounts, [
            f'{config.global_config.contests_folder}/{contest.name}/config',
            f'{config.global_config.contests_folder}/{contest.name}',
        ])

    if account_types.linux:
        icpcpwutils.write_linux_accounts(contest.name, accounts)

    icpcpwutils.write_password_sheets('ccs-and-challenge-sheets.html',
                                      f'{contest.name}/{contest.name}_password_sheets.pdf', accounts,
                                      contest.config.name, footer, banner, account_types, page_size)
    icpcpwutils.write_master_file('ccs-and-challenge-master.html', f'{contest.name}/{contest.name}_contest_master.pdf',
                                  accounts,
                                  contest.config.name, footer, banner, account_types, page_size)
elif subcommand == 'challenge':
    config.validate_challenge()

    if not os.path.isdir('challenge'):
        os.mkdir('challenge')

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')

    number_of_words_per_password = config.challenge.option_or_global('number_of_words_per_password',
                                                                     config.global_config)
    ip_prefix = config.challenge.option_or_global('ip_prefix', config.global_config)
    footer = config.challenge.option_or_global('footer', config.global_config)
    account_types = config.challenge.option_or_global('account_types', config.global_config)
    page_size = config.challenge.option_or_global('page_size', config.global_config)
    banner = config.challenge.banner

    accounts = {}
    if mode == 'generate':
        # Load existing accounts if any
        accounts = icpcpwutils.load_accounts(f'challenge/challenge.accounts.yaml', number_of_words_per_password,
                                             ip_prefix)

    for account_file in config.challenge.account_files:
        if account_file.organizations_file:
            accounts = icpcpwutils.add_team_accounts(accounts, account_file.teams_file, number_of_words_per_password,
                                                     ip_prefix, account_file.username_prefix,
                                                     account_file.organizations_file)
        else:
            accounts = icpcpwutils.add_team_accounts(accounts, account_file.teams_file, number_of_words_per_password,
                                                     ip_prefix, account_file.username_prefix)

    icpcpwutils.write_accounts_yaml('challenge', accounts)
    icpcpwutils.write_password_sheets('ccs-and-challenge-sheets.html', f'challenge/challenge_password_sheets.pdf',
                                      accounts,
                                      config.challenge.title, footer, banner, account_types, page_size)
    icpcpwutils.write_master_file('ccs-and-challenge-master.html', f'challenge/challenge_contest_master.pdf', accounts,
                                  config.challenge.title, footer, banner, account_types, page_size)

    if account_types.linux:
        icpcpwutils.write_linux_accounts('challenge', accounts)
elif subcommand == 'cds':
    config.validate_cds()

    mode = icpcpwutils.ask_or_argument(args, 'mode', 'What mode you want to use?', modes, 'Invalid mode')
